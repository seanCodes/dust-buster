fileTypes: [dust]
name: Dust
patterns:
- {include: '#yfm'}
- {include: '#dust_block_comments'}
- {include: '#dust_comments'}
- {include: '#dust_block_start'}
- {include: '#dust_block_end'}
- {include: '#dust_partials'}
- {include: '#dust_inline'}
- {include: '#dust_html_tags'}
- {include: text.html.basic}
repository:
  dust_block_comments:
    patterns:
    - begin: '\{!'
      end: '\!}'
      name: comment.block.dust
      patterns:
      - begin: '\s*(\<)'
        end: '\>\s?'
      - {include: '#dust_comments'}
  dust_inline:
    begin: \{\s*([-a-zA-Z0-9_\./\$]+)
    beginCaptures:
      '0': {name: entity.name.tag.delimiter.dust}
      '1': {name: constant.character.dust}
    end: (~?\})
    endCaptures:
      '1': {name: entity.name.tag.delimiter.dust}
      '2': {name: entity.name.tag.delimiter.dust}
    name: meta.function.inline
    patterns:
    - {include: '#dust_generic_attribute'}
    - {include: '#dust_strings'}
  dust_block_start:
    begin: (\{)(\+|\?|\^|\@|\#|\:|\<)([-a-zA-Z0-9_\./]+)\s?(@?[-a-zA-Z0-9_\./]+)*
    beginCaptures:
      '1': {name: entity.name.tag.delimiter.dust}
      '2': {name: constant.character.dust}
      '3': {name: entity.name.tag.helper.dust}
      '4': {name: entity.other.attribute-name.generic.dust}
    end: (~?\})
    endCaptures:
      '1': {name: entity.name.tag.block.closed.dust}
      '2': {name: constant.character.dust}
    name: meta.function.block.start.dust
    patterns:
    - {include: '#dust_strings'}
    - {include: '#dust_html_tags'}
    - {include: '#dust_generic_attribute'}
  dust_comments:
    patterns:
    - {begin: '(\{!)\s(\{\@|\<)', end: '\!\}', name: comment.dust}
    - begin: <!--
      captures:
        '0': {name: punctuation.definition.comment.html}
      end: -{2,3}\s*>
      name: comment.block.html
      patterns:
      - {match: --, name: invalid.illegal.bad-comments-or-CDATA.html}
  dust_block_end:
    begin: (\{~?/)([a-zA-Z0-9_\.-]+)\s*
    beginCaptures:
      '1': {name: entity.name.tag.block.open.dust}
      '2': {name: entity.name.tag.helper.dust}
    end: (~?\})
    endCaptures:
      '1': {name: entity.name.tag.block.closed.dust}
    name: meta.function.block.end.dust
    patterns: []
  entities:
    patterns:
    - captures:
        '1': {name: punctuation.definition.entity.html}
        '2': {name: punctuation.definition.entity.html}
        '3': {name: punctuation.definition.entity.html}
      match: (&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)
      name: constant.character.entity.html
    - {match: '&', name: invalid.illegal.bad-ampersand.html}
  escaped_double_quote: {match: \\", name: constant.character.escape.html}
  escaped_single_quote: {match: \\', name: constant.character.escape.html}
  dust_html_tags:
    patterns:
    - begin: (<)([a-zA-Z0-9\-:]++)(?=[^>]*></\2>)
      beginCaptures:
        '1': {name: punctuation.definition.tag.html}
        '2': {name: entity.name.tag.html}
      end: (>(<)/)(\2)(>)
      endCaptures:
        '1': {name: punctuation.definition.tag.html}
        '2': {name: meta.scope.between-tag-pair.html}
        '3': {name: entity.name.tag.html}
        '4': {name: punctuation.definition.tag.html}
      name: meta.tag.any.html
      patterns:
      - {include: '#dust_tags'}
  dust_partials:
    begin: (\{(>))\s*([-a-zA-Z0-9_\.]+)*
    beginCaptures:
      '1': {name: entity.name.tag.block.open.dust}
      '2': {name: constant.character.dust}
      '3': {name: entity.name.tag.helper.dust}
    end: (~?\/\})
    endCaptures:
      '1': {name: entity.name.tag.block.closed.dust}
      '2': {name: constant.character.dust}
    name: meta.function.block.start.dust
    patterns:
    - {include: '#dust_strings'}
  dust_strings:
    patterns:
    - {include: '#dust_string_single_quoted'}
    - {include: '#dust_string_double_quoted'}
  dust_string_double_quoted:
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.html}
    end: '"'
    endCaptures:
      '0': {name: punctuation.definition.string.end.html}
    name: string.quoted.double.dust
    patterns:
    - {include: '#dust_comments'}
    - {include: '#dust_block_comments'}
    - {include: '#dust_comments'}
    - {include: '#dust_block_start'}
    - {include: '#dust_block_end'}
    - {include: '#dust_partials'}
  dust_string_single_quoted:
    begin: ''''
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.html}
    end: ''''
    endCaptures:
      '0': {name: punctuation.definition.string.end.html}
    name: string.quoted.single.dust
    patterns:
    - {include: '#dust_block_comments'}
    - {include: '#dust_comments'}
    - {include: '#dust_inline'}
    - {include: '#dust_block_start'}
    - {include: '#dust_block_end'}
    - {include: '#dust_partials'}
    - {include: '#dust_strings'}
  dust_tags:
    patterns:
    - {include: '#dust_id_attribute'}
    - {include: '#dust_generic_attribute'}
    - {include: '#dust_strings'}
    - {include: '#dust_block_comments'}
    - {include: '#dust_comments'}
    - {include: '#dust_inline'}
    - {include: '#dust_block_start'}
    - {include: '#dust_block_end'}
    - {include: '#dust_partials'}
  dust_generic_attribute:
    begin: \b([a-zA-Z0-9_-]+)\b\s*(=)
    captures:
      '1': {name: entity.other.attribute.generic.html}
      '2': {name: punctuation.separator.key-value.html}
    end: (?<='|"|)
    name: entity.other.attribute-name.html
    patterns:
    - {include: '#dust_strings'}
  dust_id_attribute:
    begin: \b(id)\b\s*(=)
    captures:
      '1': {name: entity.other.attribute-name.id.html}
      '2': {name: punctuation.separator.key-value.html}
    end: (?<='|"|)
    name: meta.attribute-with-value.id.html
    patterns:
    - {include: '#dust_strings'}
  yfm:
    patterns:
    - begin: (?<!\s)---\n$
      end: ^---\s
      name: markup.raw.yaml.front-matter
      patterns:
      - {include: source.yaml}
scopeName: text.html.dust
uuid: d5e33b2e-ca20-40a8-bf55-8c16e32b04d4
